generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

enum roles {
  student
  faculty
  admin
  chairperson
}

model Users {
  uid     String     @id @db.VarChar(40)
  email   String     @unique @db.VarChar(254)
  role    roles      @default(student)
  student students?
}

model pre_final_course_helper {
  uid              String            @id @db.VarChar(40)
  course_id        String            @db.VarChar(40)
  branch           String            @db.VarChar(50)
  program          String            @db.VarChar(10)
  course_type      fixed_course_type
  semester         semesters
  year             String            @db.VarChar(4)
  pre_final_course pre_final_courses @relation(fields: [course_id], references: [course_id])
}

model pre_final_courses {
  course_id               String                    @id @db.VarChar(40)
  course_code             String                    @db.VarChar(10)
  course_name             String                    @db.VarChar(255)
  school                  String                    @db.VarChar(20)
  lecture                 Int                       @db.SmallInt
  tutorial                Int                       @db.SmallInt
  practical               Int                       @db.SmallInt
  credits                 Int                       @db.SmallInt
  slot                    String                    @default("N") @db.Char(1)
  status                  Boolean?
  prof_course_pre_final   prof_course_pre_final[]
  pre_final_course_helper pre_final_course_helper[]
}

model prof_course_pre_final {
  uid       String            @id @db.VarChar(40)
  course_id String            @db.VarChar(40)
  iid       String            @db.VarChar(40)
  course    pre_final_courses @relation(fields: [course_id], references: [course_id])
  professor professors        @relation(fields: [iid], references: [iid])
}

model final_courses {
  course_id              String                   @id @db.VarChar(40)
  course_code            String                   @db.VarChar(10)
  course_name            String                   @db.VarChar(255)
  school                 String                   @db.VarChar(20)
  lecture                Int                      @db.SmallInt
  tutorial               Int                      @db.SmallInt
  practical              Int                      @db.SmallInt
  credits                Int                      @db.SmallInt
  slot                   String                   @default("N") @db.Char(1)
  course_helpers         course_helper[]
  student_registered     student_registered[]
  student_pre_registered student_pre_registered[]
  prof_course            prof_course[]
  course_queries         course_queries[]
  @@index(fields:[course_id])
}

model done_courses {
  course_id            String                 @id @db.VarChar(40)
  course_code          String                 @db.VarChar(10)
  course_name          String                 @db.VarChar(255)
  lecture              Int                    @db.SmallInt
  tutorial             Int                    @db.SmallInt
  practical            Int                    @db.SmallInt
  credits              Int                    @db.SmallInt
  slot                 String                 @default("N") @db.Char(1)
  student_done_courses student_done_courses[]
  @@index(fields: [course_id])

}

enum fixed_course_type {
  IC
  DC
  DE
  FE
  HSS
}

enum semesters {
  even
  odd
}

model course_helper {
  uid         String            @id @db.VarChar(40)
  course_id   String            @db.VarChar(40)
  branch      String            @db.VarChar(50)
  program     String            @db.VarChar(10)
  course_type fixed_course_type
  semester    semesters
  year        String            @db.VarChar(4)
  course      final_courses     @relation(fields: [course_id], references: [course_id])
  @@index(fields:[course_id])
}

model students {
  student_id             String                   @id @db.VarChar(7)
  student_name           String                   @db.VarChar(255)
  branch                 String                   @db.VarChar(50)
  school                 String                   @db.VarChar(20)
  batch                  String                   @db.VarChar(4)
  program                String                   @db.VarChar(10)
  ldap_passwd            String
  user_uid               String                   @unique @db.VarChar(40) // Make it unique if one student can only have one user account
  user                   Users                    @relation(fields: [user_uid], references: [uid])
  student_done_courses   student_done_courses[]
  student_registered     student_registered[]
  student_pre_registered student_pre_registered[]
  announcement_queries   announcement_queries[]
  course_queries         course_queries[]
  student_lesser_credits student_lesser_credits[]
  @@index(fields: [student_id])
}

model student_done_courses {
  uid                 String            @id @db.VarChar(40)
  course_id           String            @db.VarChar(40)
  student_id          String            @db.VarChar(7)
  done_as_course_type fixed_course_type
  course_mode         course_modes      @default(regular)
  grade               String            @db.VarChar(2)
  student             students          @relation(fields: [student_id], references: [student_id])
  course              done_courses      @relation(fields: [course_id], references: [course_id])
  @@index(fields: [student_id, course_id])

}

enum course_modes {
  regular
  audit
  pass_fail
  equivalent
  backlog
}

model student_pre_registered {
  uid                 String            @id @db.VarChar(40)
  student_id          String            @db.VarChar(7)
  course_id           String            @db.VarChar(40)
  pre_reg_course_type fixed_course_type
  pre_reg_course_mode course_modes      @default(regular)
  accept_reject       Boolean
  student             students          @relation(fields: [student_id], references: [student_id])
  course              final_courses     @relation(fields: [course_id], references: [course_id])
  @@index(fields: [student_id, course_id])

}

model student_lesser_credits {
  uid         String   @id @db.VarChar(40)
  student_id  String   @db.VarChar(7)
  max_credits Int      @db.SmallInt
  min_credits Int      @db.SmallInt
  student     students @relation(fields: [student_id], references: [student_id])
}

model student_registered {
  uid             String            @id @db.VarChar(40)
  student_id      String            @db.VarChar(7)
  course_id       String            @db.VarChar(40)
  reg_course_type fixed_course_type
  reg_course_mode course_modes      @default(regular)
  status          String            @default("I") @db.VarChar(2)
  student         students          @relation(fields: [student_id], references: [student_id])
  course          final_courses     @relation(fields: [course_id], references: [course_id])

  @@index(fields: [student_id, course_id])
}

model professors {
  iid                   String                  @id @db.VarChar(40)
  prof_name             String                  @db.VarChar(50)
  prof_email            String                  @unique @db.VarChar(254)
  school                String                  @db.VarChar(20)
  prof_course           prof_course[]
  prof_course_pre_final prof_course_pre_final[]
  prof_course_req       prof_course_req[]
  course_announcement   course_announcement[]
}

model prof_course {
  uid       String        @id @db.VarChar(40)
  iid       String        @db.VarChar(40)
  course_id String        @db.VarChar(40)
  course    final_courses @relation(fields: [course_id], references: [course_id])
  professor professors    @relation(fields: [iid], references: [iid])
}

model prof_course_req {
  request_id     String     @id @db.VarChar(40)
  iid            String     @db.VarChar(40)
  course_code    String     @db.VarChar(10)
  slot           String     @default("N") @db.Char(1)
  chairperson_id String     @db.VarChar(40)
  accept_reject  Boolean?
  professor      professors @relation(fields: [iid], references: [iid])
}

enum course_query_type {
  course_transition
  slot_clash
  slot_change
  curriculum
  course_query
  Others
}

enum announcement_query_type {
  slot_change
  course_add
  course_drop
  Others
}

model admins {
  admin_id      String         @id @db.VarChar(40)
  admin_name    String         @db.VarChar(255)
  admin_email   String         @unique @db.VarChar(254)
  announcements announcement[]
}

model chairperson {
  chairperson_id    String @id @db.VarChar(40)
  chairperson_name  String @db.VarChar(255)
  chairperson_email String @unique @db.VarChar(254)
  school            String @db.VarChar(20)
}

model announcement {
  announcement_id      String                 @id @db.VarChar(40)
  announcement         String
  admin_id             String                 @db.VarChar(40)
  announcement_queries announcement_queries[]
  admin                admins                 @relation(fields: [admin_id], references: [admin_id])
}

model announcement_queries {
  query_id        String                  @id @db.VarChar(40)
  student_id      String                  @db.VarChar(7)
  announcement_id String                  @db.VarChar(40)
  query           String
  query_type      announcement_query_type
  response        String
  responded       Boolean
  student         students                @relation(fields: [student_id], references: [student_id])
  announcement    announcement            @relation(fields: [announcement_id], references: [announcement_id])
}

model course_announcement {
  announcement_id String           @id @db.VarChar(40)
  announcement    String
  iid             String           @db.VarChar(40)
  professors      professors       @relation(fields: [iid], references: [iid])
  course_queries  course_queries[]
}

model course_queries {
  query_id            String              @id @db.VarChar(40)
  student_id          String              @db.VarChar(7)
  course_id           String              @db.VarChar(40)
  announcement_id     String              @db.VarChar(40)
  query_type          course_query_type
  query               String
  response            String
  responded           Boolean
  student             students            @relation(fields: [student_id], references: [student_id])
  course              final_courses       @relation(fields: [course_id], references: [course_id])
  course_announcement course_announcement @relation(fields: [announcement_id], references: [announcement_id])
}
